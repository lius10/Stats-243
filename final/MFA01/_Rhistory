newList <- list(eigen,cfs,fl)
return(newList)
}
# private function to get particial factor scores,input should include both assessor and factor loading
PFS <- function(a,idx,w,fl){
pfl <- list()
pfs <- list()
for(i in 1:length(a)){
pfl[[i]] <- split(data.frame(fl),idx)[[i]]  #subset by row
pfs[[i]] <- length(a)* w[i]* as.matrix(a[[i]]) %*% as.matrix(pfl[[i]])
}
return(pfs)
}
# other
# sl <- fl^2
# eigen.cum <- cumsum(eigen)
# inertia <- eigen/sum(eigen) * 100
# inertia.cum <-cumsum(inertia)
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat(sprintf("Number of tables/blocks for analysis:", length(x$assessors)), "\n")
cat(sprintf("First two eigenvalues: ", x$eigen[1:2]), "\n")
cat(sprintf("First component of common factor scores: ", x$cfs[,1]), "\n")
cat(sprintf("Facor loadings for the first table: ", x$fl[,1]), "\n")
cat(sprintf("Partial factor score for the first table: ", x$pfs[[1]]), "\n")
invisible(x)
}
a <- MFA()
# private function to scale data
scale_data <- function(d,s,ctr=TRUE,sc=TRUE) {
t <- try(scale(d[unlist(s)]),silent = T)
if("try-error" %in% class(t)) {
stop("\neach table/block must be numeric")
}
# sum of the square values of all its elements is equal to 1
d[unlist(s)] <- scale(d[unlist(s)],center = ctr, scale = sc)/((nrow(d)-1)^0.5)
return(d)
}
a <- MFA()
# private function to check number of components
check_n <- function(n){
if (n <= 0 | !is.integer(n) | !is.null(n)) {
stop("\nargument 'ncomps' must be a positive integer")
} else {
TRUE
}
}
a <- MFA()
# private function to check number of components
check_n <- function(n){
if (!is.null(n)){
if (n <= 0 | !is.integer(n)) {
stop("\nargument 'ncomps' must be a positive integer")
}
} else {
TRUE
}
}
a <- MFA()
# private function to get GSVD, input should be whole data
GSVD <- function(d,s,w,n=2){
# get constrains
d <- as.matrix(d[unlist(s)])
len <- nrow(d)
m <-  diag(1/len,len,len)
m_0.5 <- diag((1/len)^(-0.5),len,len)
weight.mx <- diag(w,length(w),length(w))
weight_0.5.mx <-  diag(w^(-0.5),length(w),length(w))
# GSVD matrix
y <- sqrt(m) %*% d %*%sqrt(weight.mx)
GSVD <- svd(y)
if(is.null(n)){
left <- m_0.5 %*% GSVD$u
sgl <- GSVD$d
#loading - table 3 loadings (Q)
fl <- weight_0.5.mx %*% GSVD$v
# common factor scores - each row is a wine and each column is a component
cfs <- left %*% diag(sgl,ncol(GSVD$u),ncol(GSVD$u))
} else {
left <- m_0.5 %*% GSVD$u[,1:n]
sgl <- GSVD$d[1:n]
fl <- weight_0.5.mx %*% GSVD$v[,1:n]
# common factor scores - each row is a wine and each column is a component
cfs <- left %*% diag(sgl,n,n)
}
# eigenvalue and inertia
eigen <- sgl^2
newList <- list(eigen,cfs,fl)
return(newList)
}
a <- MFA()
a
?sprintf
sprintf("%f", pi)
sprintf("%5.1f", pi)
sprintf("%-10f", pi) # left justified
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", length(x$assessors), "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ", x$cfs[,1], "\n")
cat("Facor loadings for the first table: ", x$fl[,1], "\n")
cat("Partial factor score for the first table: ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA()
a
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", length(x$assessors), "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ", x$cfs[,1], "\n")
cat("Facor loadings for the first table: ", x$fl[,1], "\n")
# cat("Partial factor score for the first table: ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA()
a
a <- MFA(ncomps=2)
a
is.integer(2)
# private function to check number of components
check_n <- function(n){
if (!is.null(n)){
if (n <= 0 | !is.numeric(n)) {
stop("\nargument 'ncomps' must be a positive integer")
}
} else {
TRUE
}
}
a <- MFA(ncomps=2)
a
MFA <- function(data = get(load("data/wine.rda")),
sets =list(2:7,8:13,14:19,20:24,25:30,31:35,36:39,40:45,46:50,51:54),
ncomps = NULL, center=TRUE,scale=TRUE) {
# check whether each table is numeric
data <- scale_data(d = data,s= sets,ctr = center, sc=scale)
# check ncomps
check_n(n = ncomps)
# subset data
aj <- subset_data(d = data, s = sets)
assessor <- aj [[1]] ; j <- aj[[2]] # a : assessor ; j: length of each element in a
index_list <- rep(1:length(j),times=j)
#SVD
weight <- SVD(a=assessor)
#GSVD
gsvd <- GSVD(d=data,s=sets,w=weight,n=ncomps)
# return list(eigen,cfs,fl)
pfs <- PFS(a= assessor ,idx = index_list,w= weight,fl = gsvd[[3]])
object <- list(
assessors = assessor,
weights = weight,
eigen= gsvd[[1]], # vector
cfs = gsvd[[2]], # matrix
fl = gsvd[[3]], # matrix
pfs = pfs)  # list
class(object) <- "mfa"
object
}
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", length(x$assessors), "\n")
cat("Weight of tables:", weights, "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ", x$cfs[,1], "\n")
cat("Facor loadings for the first table (1st component): ", x$fl[1:length(x$assessors[[1]]),1], "\n")
# cat("Partial factor score for the first table (1st component): ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA(ncomps=2)
a
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", length(x$assessors), "\n")
cat("Weight of tables:", x$weights, "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ", x$cfs[,1], "\n")
cat("Facor loadings for the first table (1st component): ", x$fl[1:length(x$assessors[[1]]),1], "\n")
# cat("Partial factor score for the first table (1st component): ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA(ncomps=2)
a
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", length(x$assessors), "\n")
cat("Weight of tables:", unique(x$weights), "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ", x$cfs[,1], "\n")
cat("Facor loadings for the first table (1st component): ", x$fl[1:length(x$assessors[[1]]),1], "\n")
# cat("Partial factor score for the first table (1st component): ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA(ncomps=2)
a
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", "\n")
cat(length(x$assessors), "\n")
cat("Weight of tables:", unique(x$weights), "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ", x$cfs[,1], "\n")
cat("Facor loadings for the first table (1st component): ", x$fl[1:length(x$assessors[[1]]),1], "\n")
# cat("Partial factor score for the first table (1st component): ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA(ncomps=2)
a
#' @export
print.mfa <- function(x, ...) {
cat('object "mfa"\n\n')
cat("Number of tables/blocks for analysis:", length(x$assessors),"\n")
cat("Weight of tables:", "\n",unique(x$weights), "\n")
cat("First two eigenvalues: ", x$eigen[1:2], "\n")
cat("First component of common factor scores: ","\n",x$cfs[,1], "\n")
cat("Facor loadings for the first table (1st component): ", "\n", x$fl[1:length(x$assessors[[1]]),1], "\n")
# cat("Partial factor score for the first table (1st component): ", x$pfs[[1]], "\n")
invisible(x)
}
a <- MFA(ncomps=2)
a
load("data/wine.rda")
wine
# private function to get particial factor scores,input should include both assessor and factor loading
PFS <- function(a,idx,w,fl){
pfl <- list()
pfs <- list()
for(i in 1:length(a)){
pfl[[i]] <- split(data.frame(fl),idx)[[i]]  #subset by row
pfs[[i]] <- length(a)* w[i]* as.matrix(a[[i]]) %*% as.matrix(pfl[[i]])
}
newList <- list(pfl,pfs)
return(newList)
}
source(plot-mfa.R)
source('plot-mfa.R')
getwd()
source('R/plot-mfa.R')
a <- MFA(ncomps=2)
plot(a)
source('R/plot-mfa.R')
plot(a)
source('R/plot-mfa.R')
a <- MFA(ncomps=2)
plot(a)
a <- MFA()
plot(a)
plot(a,cfs=TRUE)
plot(a,pfs=TRUE)
plot(a,pfs=TRUE,pl=TRUE)
plot(a,pfs=TRUE,pl=TRUE)
source('R/plot-mfa.R')
plot(a,pfs=TRUE,pl=TRUE)
a$pfs
length(a$pfs)
a <- MFA(n=2)
length(a$pfs)
a <- MFA(ncomps=2)
length(a$pfs)
length(a$pfl)
a$pfl
a <- MFA(ncomps=2)
a$pfl
a <- MFA()
a$pfl
a <- MFA()
a$assessors
a$weights
a$eigen
a$cfs
a$fl
dim(a$fl)
dim(a$pfl)
a$pfl
a$pfs
MFA <- function(data = get(load("data/wine.rda")),
sets =list(2:7,8:13,14:19,20:24,25:30,31:35,36:39,40:45,46:50,51:54),
ncomps = NULL, center=TRUE,scale=TRUE) {
# check whether each table is numeric
data <- scale_data(d = data,s= sets,ctr = center, sc=scale)
# check ncomps
check_n(n = ncomps)
# subset data
aj <- subset_data(d = data, s = sets)
assessor <- aj [[1]] ; j <- aj[[2]] # a : assessor ; j: length of each element in a
index_list <- rep(1:length(j),times=j)
#SVD
weight <- SVD(a=assessor)
#GSVD - return list(eigen,cfs,fl)
gsvd <- GSVD(d=data,s=sets,w=weight,n=ncomps)
# return list(pfl, pfs)
pf <- PFS(a= assessor ,idx = index_list,w= weight,fl = gsvd[[3]])
object <- list(
assessors = assessor,
weights = weight,
eigen= gsvd[[1]], # vector
cfs = gsvd[[2]], # matrix
fl = gsvd[[3]], # matrix
idx = index_list
pfl = pf[[1]],
pfs = pf[[2]])  # list
class(object) <- "mfa"
object
}
MFA <- function(data = get(load("data/wine.rda")),
sets =list(2:7,8:13,14:19,20:24,25:30,31:35,36:39,40:45,46:50,51:54),
ncomps = NULL, center=TRUE,scale=TRUE) {
# check whether each table is numeric
data <- scale_data(d = data,s= sets,ctr = center, sc=scale)
# check ncomps
check_n(n = ncomps)
# subset data
aj <- subset_data(d = data, s = sets)
assessor <- aj [[1]] ; j <- aj[[2]] # a : assessor ; j: length of each element in a
index_list <- rep(1:length(j),times=j)
#SVD
weight <- SVD(a=assessor)
#GSVD - return list(eigen,cfs,fl)
gsvd <- GSVD(d=data,s=sets,w=weight,n=ncomps)
# return list(pfl, pfs)
pf <- PFS(a= assessor ,idx = index_list,w= weight,fl = gsvd[[3]])
object <- list(
assessors = assessor,
weights = weight,
eigen= gsvd[[1]], # vector
cfs = gsvd[[2]], # matrix
fl = gsvd[[3]], # matrix
idx = index_list,
pfl = pf[[1]],
pfs = pf[[2]])  # list
class(object) <- "mfa"
object
}
a <- MFA()
a$idx
index_test <- a$idx
fl <- a$fl
split(data.frame(fl),index_test)
index_test
typeof(split(data.frame(fl),index_test))
split(data.frame(fl),index_test)[[1]]
length(a$assessors)
unique(index_test)
a$pfs
length(a$pfs)
length(a$pfl)
a <- MFA()
dim(a$pfl)
length(a$pfl)
a$pfl
dim(list(1,2,2))
a$pfl
length(a$pfl)
length(a$pfs)
plot(a,pfs=TRUE,pl=TRUE)
a$cfs
a$cfs[,1:@]
a$cfs[,1:2]
a$pfs
a$pfs[[1]]
a$pfs[[1]][,1:2]
a <- MFA()
plot(a,pfs=TRUE,pl=TRUE)
source('R/plot-mfa.R')
a <- MFA()
plot(a,pfs=TRUE,pl=TRUE)
plot(a,pfs=TRUE,pl=TRUE)
plot(a,pfs=TRUE,pfl=TRUE)
plot(a,pfs=TRUE,pfl=TRUE)
pfs=TRUE,pfl=TRUE
pfs=TRUE;pfl=TRUE
pfs && pf
pfs & pf
pfs AND  pf
pfs &  pf
pfs<-TRUE;pfl<-TRUE
pfs &  pf
TRUE &  TRUE
TRUE &&  TRUE
source('R/plot-mfa.R')
plot(a,pfs=TRUE,pfl=TRUE)
source('R/plot-mfa.R')
plot(a,pfs=TRUE,pfl=TRUE)
plot(a,pfs=TRUE,pfl=TRUE,num=10)
plot.table(a$assessors[[1]])
install.packages('graphics')
install.packages('graphics')
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages('gridExtra')
grid.table(a$assessors[[1]])
summary(a$assessors[[1]])
a$assessors[[1]]
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))
employ.data <- data.frame(employee, salary, startdate)
employ.data
t(employ.data)
employ.data <- t(data.frame(employee, salary, startdate))
employ.data
a<-MFA()
a$eigen
len(a$eigen)
length(a$eigen)
employ.data
'emplo yee' <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))
employ.data <- t(data.frame('emplo yee', salary, startdate))
employ.data
source('R/other-mfa-method.R')
source('R/other-mfa-method.R')
source('R/other-mfa-methods.R')
a<-MFA()
ev.summary(a)
ev.summary.mfa(a)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
options(digits=2)
source('R/other-mfa-methods.R')
ev.summary(a)
toString (1:length(Eigenvalue))
toString (1:10)
source('R/other-mfa-methods.R')
ev.summary(a)
1:10
typeof(1:10)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
Component <- as.factor(1:length(Eigenvalue))
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
factor(1:10)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
source('R/other-mfa-methods.R')
ev.summary(a)
a<-MFA()
source('R/other-mfa-methods.R')
ev.summary(a)
a$cfs
a$cfs[[1]]
a$cfs[[,1]]
a$cfs[,1]
sum(a$cfs[,1])
sum(a$cfs[,1]^2)
sum(a$cfs[,1]^2)/12
length(a$eigen)
a$cfs
a$cfs ^2
typeof(a$cfs)
typeof(matrix(a$cfs))
typeof(as.matrix(a$cfs))
colSums(a$cfs ^2)
colSums(a$cfs ^2/12)
b <- a$cfs ^2
b <- a$cfs ^2/12
sweep(b,2,colSums(b),'/')
c <- sweep(b,2,colSums(b),'/')
c[,1]
sum(c[,1])
?sweep
length(a$cfs)
nrow(a$cfs)
c[1,3]
a$fl
a$weights
m = matrix(c(1:9),nrow=3, ncol=3, byrow=T)
m
m*as.vector(c(1,2,3))
?apply
sweep(m,2,c(1,2,3),'*')
t <- a$fl^2
ctr <- sweep(t,2,a$weights,'*')
a$fl
t <- a$fl^2
ctr <- sweep(t,2,a$weights,'*')
a$weights
dim(t)[2]
dim(t)[1]
ctr <- sweep(t,1,a$weights,'*')
ctr
sum(ctr[1,])
sum(ctr[,1])
